package main

import (
	"archive/zip"
	"database/sql"
	"encoding/json"
	"errors"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"

	_ "github.com/lib/pq"
)

const (
	downloadURL = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	dbConnStr   = "postgres://postgres:root@host.minikube.internal:5432/cve?sslmode=disable"
)

type CVE struct {
	AssignerOrgID     string `json:"assignerOrgId"`
	AssignerShortName string `json:"assignerShortName"`
	CVEID             string `json:"cveId"`
	DatePublished     string `json:"datePublished"`
	DateReserved      string `json:"dateReserved"`
	DateUpdated       string `json:"dateUpdated"`
	State             string `json:"state"`
	DateRejected      string `json:"dateRejected"`
}

var lastProcessedCveId string = ""
var db *sql.DB

func main() {
	// Step 1: Download the file
	var err error
	log.Println("/Downloading file...")
	if _, err := os.Stat("cve.zip"); errors.Is(err, os.ErrNotExist) {
		err := downloadFile("cve.zip", downloadURL)
		if err != nil {
			log.Fatalf("Failed to download file: %v", err)
			os.Exit(1)
		}
		log.Println("Downloaded file successfully.")

		// Step 2: Unzip the file
		log.Println("Unzipping file...")
		err = unzipFile("cve.zip", "cve_data")
		if err != nil {
			log.Fatalf("Failed to unzip file: %v", err)
			os.Exit(1)
		}
		log.Println("Unzipped file successfully.")

	} else {
		log.Println("File already exists")
	}

	// Open the database connection
	db, err = sql.Open("postgres", dbConnStr)
	if err != nil {
		log.Fatalf("Failed to open database connection: %v", err)
		return
	}
	defer db.Close()

	lastProcessedCveId, err = getLastProcessedCVE(db)
	if err != nil {
		log.Printf("Failed to get last processed cve id %v", err)
		os.Exit(1)
	}
	log.Printf("Last processed cve id: %s", lastProcessedCveId)

	var filePath string = "cve_data/cvelistV5-main/cves/2017"

	// Step 3: Process files
	err = processFiles(filePath)
	if err != nil {
		log.Fatalf("Failed to process files: %v", err)
	}
}

func downloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func unzipFile(src, dest string) error {
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, file := range r.File {
		filePath := filepath.Join(dest, file.Name)

		if file.FileInfo().IsDir() {
			os.MkdirAll(filePath, os.ModePerm)
		} else {
			if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
				return err
			}
			dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())
			if err != nil {
				return err
			}

			fileInArchive, err := file.Open()
			if err != nil {
				return err
			}

			_, err = io.Copy(dstFile, fileInArchive)
			dstFile.Close()
			fileInArchive.Close()

			if err != nil {
				return err
			}
		}
	}
	return nil
}

func processFiles(dirPath string) error {
	// Read directory
	files, err := os.ReadDir(dirPath)
	if err != nil {
		return err
	}

	// Process files and directories
	for _, file := range files {
		filePath := filepath.Join(dirPath, file.Name())
		if file.IsDir() {
			// Recursively process subdirectories
			err := processFiles(filePath)
			if err != nil {
				return err
			}
		} else {
			// Process individual files
			log.Printf("Processing file %s", filePath)
			err := processFile(db, filePath)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func processFile(db *sql.DB, filepath string) error {
	data, err := os.ReadFile(filepath)
	if err != nil {
		log.Printf("Failed to processfile %v", err)
		return err
	}

	var cveJson map[string]interface{}
	err = json.Unmarshal(data, &cveJson)
	if err == nil {
		// Check if it's an array
		cveMetadata, _ := cveJson["cveMetadata"].(map[string]interface{})
		cveData := CVE{
			AssignerOrgID:     cveMetadata["assignerOrgId"].(string),
			AssignerShortName: cveMetadata["assignerShortName"].(string),
			CVEID:             cveMetadata["cveId"].(string),
			State:             cveMetadata["state"].(string),
		}
		if cveMetadata["datePublished"] != nil {
			cveData.DatePublished = cveMetadata["datePublished"].(string)
		}
		if cveMetadata["dateRejected"] != nil {
			cveData.DateRejected = cveMetadata["dateRejected"].(string)
		}
		if cveMetadata["dateUpdated"] != nil {
			cveData.DateUpdated = cveMetadata["dateUpdated"].(string)
		}
		if cveMetadata["dateReserved"] != nil {
			cveData.DateReserved = cveMetadata["dateReserved"].(string)
		}
		if lastProcessedCveId == "" || cveData.CVEID > lastProcessedCveId {
			err = insertCVE(db, cveData)
			if err != nil {
				log.Printf("Failed to insert CVE %s: %v", cveData.CVEID, err)
			}
			lastProcessedCveId = cveData.CVEID
		} else {
			log.Printf("Skipping CVE %s", cveData.CVEID)
		}
	}
	return nil
}

func getLastProcessedCVE(db *sql.DB) (string, error) {
	var cveID string
	err := db.QueryRow("SELECT cve_id FROM cve.cve_records ORDER BY cve_id DESC LIMIT 1").Scan(&cveID)
	return cveID, err
}

func insertCVE(db *sql.DB, cve CVE) error {
	query := `
	INSERT INTO cve.cve_records (cve_id, json_data)
	VALUES ($1, $2)
	ON CONFLICT (cve_id) DO NOTHING;
	`
	cveJSON, _ := json.Marshal(cve)
	_, err1 := db.Exec(query, cve.CVEID, cveJSON)
	return err1
}
