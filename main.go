package main

import (
	"archive/zip"
	"context"
	"encoding/json"
	"errors"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/segmentio/kafka-go"
)

const (
	downloadURL = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
)

var topic = os.Getenv("KAFKA_TOPIC")
var brokerAddresses = os.Getenv("KAFKA_BROKER_ADDRESS")

func main() {
	// Step 1: Download the file
	log.Println("Downloading file...")
	if _, err := os.Stat("cve.zip"); errors.Is(err, os.ErrNotExist) {
		err := downloadFile("cve.zip", downloadURL)
		if err != nil {
			log.Fatalf("Failed to download file: %v", err)
			os.Exit(1)
		}
		log.Println("Downloaded file successfully.")
		log.Printf("Kafka Topic: %s", topic)
		log.Printf("Kafka Broker Addresses: %s", brokerAddresses)

		// Step 2: Unzip the file
		log.Println("Unzipping file...")
		err = unzipFile("cve.zip", "cve_data")
		if err != nil {
			log.Fatalf("Failed to unzip file: %v", err)
			os.Exit(1)
		}
		log.Println("Unzipped file successfully.")
	} else {
		log.Println("File already exists")
	}

	var filePath = "cve_data/cvelistV5-main/cves/"
	err := processFiles(filePath)
	if err != nil {
		log.Fatalf("Failed to process files: %v", err)
		os.Exit(1)
	}
}

func downloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func unzipFile(src, dest string) error {
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, file := range r.File {
		filePath := filepath.Join(dest, file.Name)

		if file.FileInfo().IsDir() {
			os.MkdirAll(filePath, os.ModePerm)
		} else {
			if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
				return err
			}
			dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())
			if err != nil {
				return err
			}

			fileInArchive, err := file.Open()
			if err != nil {
				return err
			}

			_, err = io.Copy(dstFile, fileInArchive)
			dstFile.Close()
			fileInArchive.Close()

			if err != nil {
				return err
			}
		}
	}
	return nil
}

func processFiles(dirPath string) error {
	// Read directory
	files, err := os.ReadDir(dirPath)
	if err != nil {
		return err
	}

	// Process files and directories
	for _, file := range files {
		filePath := filepath.Join(dirPath, file.Name())
		if file.IsDir() {
			// Recursively process subdirectories
			err := processFiles(filePath)
			if err != nil {
				return err
			}
		} else {
			// Process individual files
			log.Printf("Processing file %s", filePath)
			err := processFile(filePath)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func processFile(filepath string) error {
	data, err := os.ReadFile(filepath)
	if err != nil {
		log.Printf("Failed to process file %v", err)
		return err
	}

	var cveJson map[string]interface{}
	err = json.Unmarshal(data, &cveJson)
	if err == nil {
		err = publishToKafka(cveJson)
		if err != nil {
			log.Printf("Failed to publish CVE to Kafka: %v", err)
		}
	}
	return nil
}

func publishToKafka(message interface{}) error {
	log.Printf("Publishing message to Kafka: %s", topic)

	// Split the broker addresses
	brokerList := strings.Split(brokerAddresses, ",")
	log.Printf("Broker List: %v", brokerList)

	writer := kafka.Writer{
		Addr:     kafka.TCP(brokerList...),
		Topic:    topic,
		Balancer: &kafka.LeastBytes{},
	}

	messageBytes, err := json.Marshal(message)
	if err != nil {
		return err
	}

	err = writer.WriteMessages(context.Background(),
		kafka.Message{
			Value: messageBytes,
		},
	)
	if err != nil {
		return err
	}

	return writer.Close()
}
