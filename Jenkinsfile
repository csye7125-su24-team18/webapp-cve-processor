pipeline {
    
    agent any
   environment {
        GITHUB_PAT = credentials('github_pat')
        DOCKER_CREDS = credentials('dockerhub-credentials')
        DOCKER_WEBAPP = 'hsa404/webapp'
        DOCKER_DB = 'hsa404/webapp-db'
    }

    stages {
        

         stage("Check Commit"){
            when{
                not{
                    branch 'main'
                }
            }
            steps{
                script{
                    String commitMessage = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    def conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|\w+)(\(.+\))?: .{1,}$/

                    if (!commitMessage.matches(conventionalCommitRegex)) {
                        error "Commit message '${commitMessage}' does not follow the conventional commit format"
                    }
                }
            }
        }
       stage('Build') {
            when {
                branch 'main'
            }
            stages{
                stage('Checkout') {
                    steps {
                        git branch: 'main', url: 'https://github.com/csye7125-su24-team18/webapp-cve-processor.git', credentialsId: 'github_pat'
                    }
                }

                stage('Setup Docker Buildx') {
                    steps {
                        script {
                            // Check if a builder with the specified name already exists
                            def builderExists = sh(script: 
                            '''
                                docker buildx inspect --bootstrap mybuilder
                             ''', 
                             returnStatus: true) == 0

                            // If the builder exists, remove it
                            if (builderExists) {
                                sh '''
                                    docker buildx rm mybuilder
                                    '''
                            }

                            // Create a new builder
                            sh '''
                                docker buildx create --name mybuilder --use
                                docker buildx inspect --bootstrap
                            '''
                            
                        }
                    }
                }

                stage('Release') {
                     tools {
                        nodejs "nodejs"
                    }
                    steps {
                        script {
                            withCredentials([string(credentialsId: 'github_pat', variable: 'GH_TOKEN')]) {
                                env.GIT_LOCAL_BRANCH='main'
                                sh 'npx semantic-release'
                            }

                            LATEST_TAG = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()

                        }
                    }                
                }

                stage('Build and Push Docker Image') {
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh '''
                                    echo "Docker Username: \$DOCKER_USERNAME"
                                    echo "Docker Password: \$DOCKER_PASSWORD"
                                    echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                                '''

                                    sh '''
                                        docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile.app --no-cache -t ${DOCKER_WEBAPP}:latest -t ${DOCKER_WEBAPP}:${env.RELEASE_VERSION} .
                                    '''
                                    sh '''
                                          docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile.db --no-cache -t ${DOCKER_DB}:latest -t ${DOCKER_DB}:${env.RELEASE_VERSION} .
                                    '''
                                
                            }
                        }
                    }
                }


                

            }
        }

      
     

        stage ('Cleanup') {
            steps {
                echo "Cleaning up the code"
            }
        }

    
    }
}
