pipeline {
    agent {
            docker {
                image 'commitlint/commitlint:latest'
                args '-v $PWD:/workspace --entrypoint=""' 
        }
    }
   environment {
        GITHUB_PAT = credentials('github_pat')
        NEXT_VERSION = nextVersion()
        PREVIOUS_VERSION = currentVersion()
        DOCKER_CREDS = credentials('dockerhub-credentials')
        DOCKER_REGISTRY = 'hsa404/webapp'
    }

    stages {
        
        // stage('Install Dependencies') {
        //     steps {
        //         sh 'apt-get install -y nodejs npm'
        //     }
        // }

        stage('Check Commit Message') {
            when{
                not{
                    branch 'main'
                
                }
            }
            steps{
                script{
                    String commitMessage = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim();
                     sh """
                        if [ ! -f commitlint.config.js ]; then
                            echo "module.exports = {extends: ['@commitlint/config-conventional']};" > commitlint.config.js
                        fi
                    """

                    // Check the last commit message
                    sh "commitlint --last"
                }
                
            }
        }

       stage('Build') {
            when {
                branch 'main'
            }
            stages{
                stage('Checkout') {
                    steps {
                        git branch: 'main', url: 'https://github.com/csye7125-su24-team18/webapp-cve-processor.git', credentialsId: 'github_pat'
                    }
                }

                stage('Setup Docker Buildx') {
                    steps {
                        script {
                            // Check if a builder with the specified name already exists
                            def builderExists = sh(script: 
                            '''
                                docker --version
                                cd webapp
                                pwd
                                ls -al
                                docker buildx inspect --bootstrap mybuilder
                             ''', 
                             returnStatus: true) == 0

                            // If the builder exists, remove it
                            if (builderExists) {
                                sh '''
                                    cd webapp
                                    pwd
                                    ls -al
                                    docker buildx rm mybuilder
                                    '''
                            }

                            // Create a new builder
                            sh '''
                                cd webapp
                                pwd
                                ls -al
                                docker buildx create --name mybuilder --use
                                docker buildx inspect --bootstrap
                            '''
                            
                        }
                    }
                }

                stage('Build and Push Docker Image') {
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh '''
                                    echo "Docker Username: \$DOCKER_USERNAME"
                                    echo "Docker Password: \$DOCKER_PASSWORD"
                                    echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                                '''
                            
                                    sh '''
                                        echo ${NEXT_VERSION}
                                        cd webapp
                                        pwd
                                        ls -al
                                        docker buildx build --platform linux/amd64,linux/arm64 -t ${DOCKER_REGISTRY}:${NEXT_VERSION} --push .
                                        docker buildx rm mybuilder
                                    '''
                                
                            }
                        }
                    }
                }
            }
        }


     

        stage ('Cleanup') {
            steps {
                echo "Cleaning up the code"
            }
        }

    
    }
}
